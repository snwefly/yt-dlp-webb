name: Code Quality Check

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy
        pip install -r requirements.txt

    - name: Run Black (Code Formatting)
      run: |
        black --check --diff yt_dlp/

    - name: Run isort (Import Sorting)
      run: |
        isort --check-only --diff yt_dlp/

    - name: Run Flake8 (Style Guide)
      run: |
        flake8 yt_dlp/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 yt_dlp/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Pylint (Code Analysis)
      run: |
        pylint yt_dlp/web/ --exit-zero --output-format=text --reports=no --score=no

    - name: Run MyPy (Type Checking)
      run: |
        mypy yt_dlp/web/ --ignore-missing-imports --no-strict-optional
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt

    - name: Run Bandit (Security Issues)
      run: |
        bandit -r yt_dlp/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run Safety (Dependency Vulnerabilities)
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  dockerfile-lint:
    runs-on: ubuntu-latest
    name: Dockerfile Lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  yaml-lint:
    runs-on: ubuntu-latest
    name: YAML Lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run yamllint
      run: |
        pip install yamllint
        yamllint .github/workflows/ docker-compose*.yml

  shell-check:
    runs-on: ubuntu-latest
    name: Shell Script Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: '.'
        format: gcc
        severity: warning

  dependency-review:
    runs-on: ubuntu-latest
    name: Dependency Review
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  codeql:
    runs-on: ubuntu-latest
    name: CodeQL Analysis
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
