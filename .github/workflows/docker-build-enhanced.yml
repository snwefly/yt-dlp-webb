name: 增强版 Docker 构建 - 支持多种构建策略

on:
  # 手动触发，支持多种构建策略
  workflow_dispatch:
    inputs:
      build_strategy:
        description: '构建策略'
        required: true
        default: '混合模式'
        type: choice
        options:
          - '构建时下载'
          - '运行时下载'
          - '混合模式'
          - '本地模式'

      ytdlp_source:
        description: 'yt-dlp 源类型'
        required: true
        default: 'GitHub发布版'
        type: choice
        options:
          - 'GitHub发布版'
          - 'PyPI官方包'
          - '本地文件'

      ytdlp_version:
        description: 'yt-dlp 版本'
        required: false
        default: 'latest'
        type: string

      build_platforms:
        description: '构建平台 (用逗号分隔)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

      image_tag:
        description: '镜像标签'
        required: false
        default: 'latest'
        type: string

      push_to_registry:
        description: '是否推送到镜像仓库'
        required: false
        default: true
        type: boolean

      run_tests:
        description: '是否运行功能测试'
        required: false
        default: true
        type: boolean

      environment:
        description: '环境类型'
        required: false
        default: '生产环境'
        type: choice
        options:
          - '开发环境'
          - '生产环境'
          - '测试环境'

  # 自动触发（可选，默认注释）
  # push:
  #   branches: [ main, master ]
  #   tags: [ 'v*' ]
  # pull_request:
  #   branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建信息准备
  prepare:
    runs-on: ubuntu-latest
    outputs:
      dockerfile: ${{ steps.config.outputs.dockerfile }}
      requirements: ${{ steps.config.outputs.requirements }}
      start_script: ${{ steps.config.outputs.start_script }}
      image_suffix: ${{ steps.config.outputs.image_suffix }}
      build_args: ${{ steps.config.outputs.build_args }}

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4

    - name: 配置构建策略
      id: config
      run: |
        # 中文到英文的映射
        case "${{ github.event.inputs.build_strategy || '混合模式' }}" in
          "构建时下载") STRATEGY="build-time" ;;
          "运行时下载") STRATEGY="runtime" ;;
          "混合模式") STRATEGY="hybrid" ;;
          "本地模式") STRATEGY="local" ;;
          *) STRATEGY="hybrid" ;;
        esac

        case "${{ github.event.inputs.ytdlp_source || 'GitHub发布版' }}" in
          "GitHub发布版") YTDLP_SOURCE="github_release" ;;
          "PyPI官方包") YTDLP_SOURCE="pypi" ;;
          "本地文件") YTDLP_SOURCE="local" ;;
          *) YTDLP_SOURCE="github_release" ;;
        esac

        case "${{ github.event.inputs.environment || '生产环境' }}" in
          "开发环境") ENVIRONMENT="development" ;;
          "生产环境") ENVIRONMENT="production" ;;
          "测试环境") ENVIRONMENT="testing" ;;
          *) ENVIRONMENT="production" ;;
        esac

        YTDLP_VERSION="${{ github.event.inputs.ytdlp_version || 'latest' }}"

        echo "🔧 配置构建策略: $STRATEGY"
        echo "📦 yt-dlp 源: $YTDLP_SOURCE"
        echo "🏷️ yt-dlp 版本: $YTDLP_VERSION"
        echo "🌍 环境: $ENVIRONMENT"

        # 根据策略设置文件（使用新的文件夹结构）
        case $STRATEGY in
          "build-time")
            echo "dockerfile=dockerfiles/Dockerfile.build-time" >> $GITHUB_OUTPUT
            echo "requirements=requirements/requirements.github.txt" >> $GITHUB_OUTPUT
            echo "start_script=scripts/start.sh" >> $GITHUB_OUTPUT
            echo "image_suffix=build-time" >> $GITHUB_OUTPUT
            echo "strategy_chinese=构建时下载" >> $GITHUB_OUTPUT
            ;;
          "runtime")
            echo "dockerfile=dockerfiles/Dockerfile.runtime" >> $GITHUB_OUTPUT
            echo "requirements=requirements/requirements.runtime.txt" >> $GITHUB_OUTPUT
            echo "start_script=scripts/start-runtime.sh" >> $GITHUB_OUTPUT
            echo "image_suffix=runtime" >> $GITHUB_OUTPUT
            echo "strategy_chinese=运行时下载" >> $GITHUB_OUTPUT
            ;;
          "hybrid")
            echo "dockerfile=dockerfiles/Dockerfile.hybrid" >> $GITHUB_OUTPUT
            echo "requirements=requirements/requirements.hybrid.txt" >> $GITHUB_OUTPUT
            echo "start_script=scripts/start-hybrid.sh" >> $GITHUB_OUTPUT
            echo "image_suffix=hybrid" >> $GITHUB_OUTPUT
            echo "strategy_chinese=混合模式" >> $GITHUB_OUTPUT
            ;;
          "local")
            echo "dockerfile=dockerfiles/Dockerfile.local-ytdlp" >> $GITHUB_OUTPUT
            echo "requirements=requirements/requirements.local.txt" >> $GITHUB_OUTPUT
            echo "start_script=scripts/start.sh" >> $GITHUB_OUTPUT
            echo "image_suffix=local" >> $GITHUB_OUTPUT
            echo "strategy_chinese=本地模式" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ 不支持的构建策略: $STRATEGY"
            exit 1
            ;;
        esac

        # 设置构建参数
        BUILD_ARGS="BUILDTIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        BUILD_ARGS="$BUILD_ARGS,VERSION=${{ github.event.inputs.image_tag || 'latest' }}"
        BUILD_ARGS="$BUILD_ARGS,REVISION=${{ github.sha }}"
        BUILD_ARGS="$BUILD_ARGS,YTDLP_SOURCE=$YTDLP_SOURCE"
        BUILD_ARGS="$BUILD_ARGS,YTDLP_VERSION=$YTDLP_VERSION"
        BUILD_ARGS="$BUILD_ARGS,ENVIRONMENT=$ENVIRONMENT"

        echo "build_args=$BUILD_ARGS" >> $GITHUB_OUTPUT

        echo "✅ 配置完成"

  # 主构建作业
  build:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 验证构建文件
      run: |
        DOCKERFILE="${{ needs.prepare.outputs.dockerfile }}"
        REQUIREMENTS="${{ needs.prepare.outputs.requirements }}"
        START_SCRIPT="${{ needs.prepare.outputs.start_script }}"

        echo "🔍 验证构建文件..."

        if [ ! -f "$DOCKERFILE" ]; then
          echo "❌ Dockerfile 不存在: $DOCKERFILE"
          exit 1
        fi

        if [ ! -f "$REQUIREMENTS" ]; then
          echo "⚠️ Requirements 文件不存在: $REQUIREMENTS，使用默认文件"
          # 可以创建默认文件或使用备用文件
        fi

        if [ ! -f "$START_SCRIPT" ]; then
          echo "⚠️ 启动脚本不存在: $START_SCRIPT，使用默认脚本"
        fi

        echo "✅ 文件验证完成"

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录容器注册表
      if: github.event.inputs.push_to_registry == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}-${{ needs.prepare.outputs.image_suffix }}
          type=raw,value=${{ needs.prepare.outputs.image_suffix }}-{{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=${{ needs.prepare.outputs.image_suffix }}-${{ github.event.inputs.ytdlp_source || 'github_release' }}
        labels: |
          org.opencontainers.image.title=YT-DLP Web (${{ github.event.inputs.build_strategy || 'hybrid' }} 模式)
          org.opencontainers.image.description=yt-dlp Web界面 - ${{ github.event.inputs.build_strategy || 'hybrid' }} 构建模式
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
          build.strategy=${{ github.event.inputs.build_strategy || 'hybrid' }}
          ytdlp.source=${{ github.event.inputs.ytdlp_source || 'github_release' }}
          ytdlp.version=${{ github.event.inputs.ytdlp_version || 'latest' }}

    - name: 构建并推送 Docker 镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ needs.prepare.outputs.dockerfile }}
        platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event.inputs.push_to_registry == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ needs.prepare.outputs.build_args }}
        cache-from: type=gha,scope=${{ needs.prepare.outputs.image_suffix }}
        cache-to: type=gha,mode=max,scope=${{ needs.prepare.outputs.image_suffix }}

    - name: 构建结果摘要
      run: |
        echo "🎉 Docker 镜像构建完成！"
        echo ""
        echo "📋 构建信息:"
        echo "  🏗️ 构建策略: ${{ github.event.inputs.build_strategy || 'hybrid' }}"
        echo "  📦 yt-dlp 源: ${{ github.event.inputs.ytdlp_source || 'github_release' }}"
        echo "  🏷️ yt-dlp 版本: ${{ github.event.inputs.ytdlp_version || 'latest' }}"
        echo "  🌍 环境: ${{ github.event.inputs.environment || 'production' }}"
        echo "  🏷️ 镜像标签: ${{ steps.meta.outputs.tags }}"
        echo "  🚀 推送状态: ${{ github.event.inputs.push_to_registry == 'true' }}"
        echo "  🏗️ 构建平台: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}"
        echo "  📁 Dockerfile: ${{ needs.prepare.outputs.dockerfile }}"

  # 功能测试作业
  test:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event.inputs.run_tests == 'true'

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4

    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 构建测试镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ needs.prepare.outputs.dockerfile }}
        platforms: linux/amd64
        push: false
        tags: test-image:latest
        load: true
        build-args: ${{ needs.prepare.outputs.build_args }}
        cache-from: type=gha,scope=${{ needs.prepare.outputs.image_suffix }}

    - name: 运行容器测试
      run: |
        echo "🔍 验证测试镜像..."
        docker images

        echo "🧪 启动测试容器..."
        # 启动容器
        docker run -d --name test-container \
          -p 8080:8080 \
          -e ENVIRONMENT=testing \
          test-image:latest

        # 等待容器启动
        echo "⏳ 等待容器启动..."
        sleep 30

        # 检查容器状态
        if ! docker ps | grep -q test-container; then
          echo "❌ 容器启动失败"
          docker logs test-container
          exit 1
        fi

        echo "✅ 容器启动成功"

    - name: 健康检查测试
      run: |
        echo "🔍 执行健康检查..."

        # 等待服务完全启动
        for i in {1..12}; do
          if curl -f http://localhost:8080/health >/dev/null 2>&1; then
            echo "✅ 健康检查通过"
            break
          fi
          echo "⏳ 等待服务启动... ($i/12)"
          sleep 10
        done

        # 最终检查
        if ! curl -f http://localhost:8080/health; then
          echo "❌ 健康检查失败"
          docker logs test-container
          exit 1
        fi

    - name: API 功能测试
      run: |
        echo "🔧 执行 API 功能测试..."

        # 测试登录 API
        LOGIN_RESPONSE=$(curl -s -X POST http://localhost:8080/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"admin","password":"admin123"}')

        if echo "$LOGIN_RESPONSE" | grep -q '"success":true'; then
          echo "✅ 登录 API 测试通过"
        else
          echo "❌ 登录 API 测试失败"
          echo "响应: $LOGIN_RESPONSE"
          exit 1
        fi

        # 提取 token
        TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

        if [ -z "$TOKEN" ]; then
          echo "❌ 无法获取认证 token"
          exit 1
        fi

        # 测试视频信息 API
        INFO_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
          "http://localhost:8080/api/info?url=https://www.youtube.com/watch?v=dQw4w9WgXcQ")

        if echo "$INFO_RESPONSE" | grep -q '"success":true'; then
          echo "✅ 视频信息 API 测试通过"
        else
          echo "⚠️ 视频信息 API 测试失败（可能是网络问题）"
          echo "响应: $INFO_RESPONSE"
        fi

    - name: 清理测试容器
      if: always()
      run: |
        echo "🧹 清理测试容器..."
        docker stop test-container || true
        docker rm test-container || true
        docker rmi test-image:latest || true

  # 安全扫描作业
  security:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event.inputs.push_to_registry == 'true'

    steps:
    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.inputs.image_tag || 'latest' }}-${{ needs.prepare.outputs.image_suffix }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: 上传扫描结果
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'Trivy-${{ needs.prepare.outputs.image_suffix }}'
