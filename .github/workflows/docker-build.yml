name: 构建并推送Docker镜像

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: '是否推送到镜像仓库'
        required: false
        default: true
        type: boolean
      build_platforms:
        description: '构建平台 (用逗号分隔，例如: linux/amd64,linux/arm64)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录容器注册表
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=YT-DLP 网页界面
          org.opencontainers.image.description=带下载管理的yt-dlp网页界面
          org.opencontainers.image.vendor=${{ github.repository_owner }}

    - name: 获取构建信息
      id: build_info
      run: |
        echo "buildtime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "version=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT  # <-- 修改在此
        echo "revision=${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDTIME=${{ steps.build_info.outputs.buildtime }}
          VERSION=${{ steps.build_info.outputs.version }}
          REVISION=${{ steps.build_info.outputs.revision }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        no-cache-filters: requirements.txt

    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: 上传Trivy扫描结果到GitHub安全选项卡
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'Trivy Scan'

  test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 检出代码库
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 构建测试镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: test-image:latest
        cache-from: type=gha
        no-cache-filters: requirements.txt

    - name: 测试容器启动
      run: |
        # 启动容器
        docker run -d --name test-container -p 8080:8080 \
          -e ADMIN_USERNAME=testuser \
          -e ADMIN_PASSWORD=testpass123 \
          test-image:latest

        # 等待容器启动
        sleep 30

        # 检查容器是否运行
        if ! docker ps | grep test-container; then
          echo "容器启动失败"
          docker logs test-container
          exit 1
        fi

        # 检查健康状态
        for i in {1..10}; do
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "健康检查通过"
            break
          fi
          if [ $i -eq 10 ]; then
            echo "健康检查失败"
            docker logs test-container
            exit 1
          fi
          sleep 5
        done

        # 清理
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 运行Snyk检查漏洞
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        args: --severity-threshold=high
      continue-on-error: true

    - name: 上传结果到GitHub代码扫描
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif
        category: 'Snyk Scan'
