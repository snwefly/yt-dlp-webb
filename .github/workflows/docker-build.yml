name: 构建并推送Docker镜像

on:
  # 只允许手动触发构建
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: '是否推送到镜像仓库'
        required: false
        default: true
        type: boolean
      build_platforms:
        description: '构建平台 (用逗号分隔，例如: linux/amd64,linux/arm64)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string
      image_tag:
        description: '镜像标签'
        required: false
        default: 'latest'
        type: string

  # 如果需要，可以取消注释以下行来启用自动触发
  # push:
  #   branches: [ main, master, develop ]
  #   tags: [ 'v*' ]
  # pull_request:
  #   branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
    - name: 检出代码库
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录容器注册表
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ github.event.inputs.image_tag || 'latest' }}
          type=raw,value=manual-build-{{date 'YYYYMMDD-HHmmss'}}
        labels: |
          org.opencontainers.image.title=YT-DLP 网页界面
          org.opencontainers.image.description=带下载管理的yt-dlp网页界面
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

    - name: 获取构建信息
      id: build_info
      run: |
        echo "buildtime=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_OUTPUT
        echo "revision=${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: 构建并推送Docker镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDTIME=${{ steps.build_info.outputs.buildtime }}
          VERSION=${{ steps.build_info.outputs.version }}
          REVISION=${{ steps.build_info.outputs.revision }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 构建结果
      run: |
        echo "🎉 Docker镜像构建完成！"
        echo "📦 镜像标签: ${{ steps.meta.outputs.tags }}"
        echo "🚀 推送状态: ${{ github.event_name == 'workflow_dispatch' && (github.event.inputs.push_to_registry == 'true' || github.event.inputs.push_to_registry == '') }}"
        echo "🏗️ 构建平台: ${{ github.event.inputs.build_platforms || 'linux/amd64,linux/arm64' }}"

    - name: 运行Trivy漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: 上传Trivy扫描结果到GitHub安全选项卡
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'Trivy Scan'

  # 测试作业已移除，因为现在只支持手动触发
  # 如果需要测试，可以在手动触发时选择不推送到仓库，仅构建测试
